// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  // Recommended for serverless environments like Vercel
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  // Use the pooled URL for querying, which is essential for serverless environments.
  url      = env("DATABASE_URL_POOL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebSettings {
  id            Int     @id @default(1)
  logoUrl       String?
  companyName   String
  whatsappSales String
  footerText    String
  socialMedia   Json
  menuItems     Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProductCategory {
  id            Int                  @id @default(autoincrement())
  name          String               @unique
  slug          String               @unique
  description   String?
  imageUrl      String?
  subCategories ProductSubCategory[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

model ProductSubCategory {
  id         Int             @id @default(autoincrement())
  name       String
  category   ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  products   Product[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@unique([name, categoryId])
}

model Product {
  id               Int                 @id @default(autoincrement())
  title            String
  slug             String              @unique
  description      String
  longDescription  String?
  images           Json                @default("[]") // Store image URLs as a JSON array
  features         Json                @default("[]") // Store features as a JSON array
  specifications   Json?                              // Store specs as a JSON object
  metaTitle        String?
  metaDescription  String?
  tokopediaUrl     String?
  shopeeUrl        String?
  subCategory      ProductSubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId    Int?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}
